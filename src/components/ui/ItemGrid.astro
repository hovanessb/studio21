---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';
import Image from 'astro/components/Image.astro';

const { items = [], columns, defaultIcon = '', classes = {}} = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, callToAction, href, classes: itemClasses = {}, image={alt:""} }) => (
        <a class="pointer" href={href}>
            <div class="intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
              <div class={twMerge('flex flex-row max-w-md', panelClass, itemClasses?.panel)}>
                {
                  
                <div class="aspect-w-16 aspect-h-7">
                  {
                    image.src && (
                      <div class="w-full h-80 object-cover rounded-xl mx-auto bg-gray-500 shadow-lg">
                        {typeof image === 'string' ? (
                          <Fragment set:html={image} />
                        ) : (
                          <Image
                            class="w-full h-80 object-cover mx-auto bg-gray-500 shadow-lg"
                            width={250}
                            height={250}
                            widths={[250, 400,  768]}
                            src= {image.src}
                            alt={image.alt ? image.alt : "test"}
                          />
                        )}
                       <span class="text-2xl -right-28   hover:backdrop-brightness-200 hover:text-slate-900 backdrop-hue-rotate-180 bg-orange-300/30 p-8  top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-orange-100 text-center">{image.alt ? image.alt : "test"}</span>
                      </div>
                    )
                  }
                </div>
                <div class="flex justify-center">
                  {(icon || defaultIcon) && (
                    <Icon
                      name={icon || defaultIcon}
                      class={twMerge('w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2', defaultIconClass, itemClasses?.icon)}
                    />
                  )}
                </div>
                <div class="mt-0.5">
                  {title && <h3 class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</h3>}
                  {description && (
                    <p
                      class={twMerge(`${title ? 'mt-3' : ''} text-muted`, descriptionClass, itemClasses?.description)}
                      set:html={description}
                    />
                  )}
                  {callToAction && (
                    <div class={twMerge(`${title || description ? 'mt-3' : ''}`, actionClass, itemClasses?.actionClass)}>
                      <Button variant="link" {...callToAction} />
                    </div>
                  )}
                </div>
              </div>}
            </div>
          </a>

          ))}
        </div>

  )
}
