---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline= await Astro.slots.render('tagline'),

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
  messages = await Astro.slots.render('messages'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative mx-auto">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-8 md:pb-8 max-w-5xl z-20 mx-auto">
        {
          tagline && (
            <p
              class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class="text-xl text-muted mb-6 dark:text-slate-300 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={subtitle}
              />
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div
        class="intersect-once intercept-no-queue z-0 w-full intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
      >
        {
          image && (
            <div class="bg-black relative max-h-80 overflow-hidden maxz-0 w-full">
              <div class="grid grid-cols-2">
                {typeof image === 'string' ? (
                  <Fragment set:html={image} />
                ) : (
                  <Image
                    class=" rounded-md w-full max-h-20 overflow-hidden"
                    widths={[400, 768, 1024, 2040]}
                    sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                    loading="eager"
                    width={1024}
                    height={576}
                    {...image}
                  />
                )}
                <p data-messages={messages} class="text-orange-200 pt-24 text-5xl" id="changing"></p>
              </div>
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>

<script>

  const textElement = document.getElementById('changing');
  const mess =  textElement?.dataset.messages?.split(".,")
  if(mess){
    function typeWriter() {
      let i = 0;
      let txt = mess[Math.floor(Math.random() * mess.length)];
      let speed = 100; // Adjust the typing speed here
      if(textElement){
        textElement.innerHTML = ""
      }
      function type() {
        if (i < txt.length && textElement) {
          textElement.innerHTML += txt.charAt(i);
          i++;
          setTimeout(type, speed);
        }
      }

      type();
    }
    typeWriter()
    setInterval(typeWriter,4500);
  }
</script> 